% hard_soft_data_long = importdata('C:\\Users\\admin\\pacof\\data\\hard_soft_data_long.csv');
data = importdata('C:\\Users\\admin\\Documents\\MATLAB\\feedback_modulation\\auto_gen_hard_soft_data_long.csv');
data(data == 999999) = NaN;


participants = 1; % participants column number, see pps below for participants to be included
condition = 2;
delay = 3;
tot = 4;
contacts = 5;

raw = 0;
average = 1;
low_pass = 2;
scale = 3;

pps = 10:19;


for r=0:3 % for each condition
    fprintf('%d %.2f %.2f %.2f %.2f \n', ...
        r, ... 
        mean(data(  data(:,condition)==r & ...
                    data(:,delay)==1 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot), ...
            'omitnan')/1000, ...
        mean(data(  data(:,condition)==r & ...
                    data(:,delay)==2 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot), ...
            'omitnan')/1000, ...
        mean(data(  data(:,condition)==r & ...
                    data(:,delay)==3 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot), ...
            'omitnan')/1000, ...
        mean(data(  data(:,condition)==r & ...
                    data(:,delay)==4 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot), ...
            'omitnan')/1000);
end
%%
del0 = [];
del1 = [];
del2 = [];
del3 = [];

for r=0:3 % for each condition, do signed wilcoxon test for back vs del3
    x0 = data(  data(:,condition)==r & ...
                    data(:,delay)==1 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot)/1000;
    fprintf('KS test %s for condition %i and delay 0 \n', passfail(kstest(x0)), r)
    del0(end+1:end+length(pps)) = x0;
    x1 = data(  data(:,condition)==r & ...
                    data(:,delay)==2 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot)/1000;
    fprintf('KS test %s for condition %i and delay 1 \n', passfail(kstest(x1)), r)
    del1(end+1:end+length(pps)) = x1;
    x2 = data(  data(:,condition)==r & ...
                    data(:,delay)==3 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot)/1000;
    fprintf('KS test %s for condition %i and delay 2 \n', passfail(kstest(x2)), r)
    del2(end+1:end+length(pps)) = x2;
    x3 = data(  data(:,condition)==r & ...
                    data(:,delay)==4 & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
                    tot)/1000;
    fprintf('KS test %s for condition %i and delay 3 \n', passfail(kstest(x3)), r)
    del3(end+1:end+length(pps)) = x3;
    


    [p,h, stats] = signrank(x2,x3, "alpha",0.05);
    fprintf("null hypothesis of delay=300 and blackout conditions for " + ...
        "condition %i \t having equal medians is %s, with p value %i " + ...
        "and statistic %i (n=%i) \n", r, nullh(h), p, stats.signedrank, length(x2))
end
%%
fprintf('\nKS test %s for all conditions and delay 3 \n', passfail(kstest(del3)))
[p,h, stats] = signrank(del2,del3, "alpha",0.05);
    fprintf("null hypothesis of delay=300 and blackout conditions for " + ...
        "all conditions \t having equal medians is %s, with p value %i " + ...
        "and statistic %i (n=%i) \n", nullh(h), p, stats.signedrank, length(del2))



function y = passfail(x) 
    if (x); y = "failed"; else; y="passed"; end
end


function y = nullh(x) 
    if (x); y = "rejected"; else; y="not rejected"; end
end

% hard_soft_data_long = importdata('C:\\Users\\admin\\pacof\\data\\hard_soft_data_long.csv');
data = importdata('C:\\Users\\admin\\Documents\\MATLAB\\feedback_modulation\\auto_gen_hard_soft_data_long.csv');
data(data == 999999) = NaN;

data(:,4) = data(:,4)/1000;

participants = 1;
condition = 2;
delay = 3;
tot = 4;
contacts = 5;

raw = 0;
average = 1;
low_pass = 2;
scale = 3;

pps = 1:19;

%%
measure = contacts;
for r=1:4
    boxplot([data(  data(:,condition)==raw & ...
                    data(:,delay)==r & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==average & ...
                    data(:,delay)==r & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==low_pass & ...
                    data(:,delay)==r & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==scale & ...
                    data(:,delay)==r & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure) ...
            ], 'Labels',{'raw','average', 'low pass', 'scale'})
    if measure == tot
        ylabel('Time in seconds')
    elseif measure == contacts
        ylabel('Number of contacts')
    end
    xlabel('Feedback condition')
    if r == 0
        title(strcat('Hard/soft task', measureprint(measure), ' per feedback condition with no time delay'))
    elseif r == 1
        title(strcat('Hard/soft task', measureprint(measure), ' per feedback condition with 150 ms of delay'))
    elseif r == 2
        title(strcat('Hard/soft task', measureprint(measure), ' per feedback condition with 300 ms of delay'))
    elseif r == 3
        title(strcat('Hard/soft task', measureprint(measure), ' per feedback condition with no visual feedback'))
    end
    saveas(gcf, strcat("C:\\Users\\admin\\pacof\\data\\matlab_figures\\boxplot_delay_", string(r), "_", measureprint(measure),".pdf"))
end

%%
boxplot([data(  data(:,condition)==raw & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==average & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==low_pass & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure), ...
        data(       data(:,condition)==scale & ...
                    data(:,participants)>=min(pps) & ...
                    data(:,participants)<=max(pps), ...
            measure) ...
            ], 'Labels',{'raw','average', 'low pass', 'scale'})
    if measure == tot
        ylabel('Time in seconds')
    elseif measure == contacts
        ylabel('Number of contacts')
    end
    xlabel('Feedback condition')    
    title(strcat('Hard/soft task', measureprint(measure), ' per feedback condition over all time delays'))
    saveas(gcf, strcat("C:\\Users\\admin\\pacof\\data\\matlab_figures\\boxplot_all_delays_",measureprint(measure),".pdf"))

%%

tablerow = [];
metadata = [];
for r=1:4
    [p,h, stats] = signrank(data(   data(:,condition)==raw & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure), ...
                            data(   data(:,condition)==average & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure), ...
                    "alpha",0.05);
%     fprintf("len: %i",length(data(   data(:,condition)==raw & ...
%                                     data(:,delay)==r & ...
%                                     data(:,participants)>=min(pps) & ...
%                                     data(:,participants)<=max(pps), ...
%                             measure)))
%     fprintf("null hypothesis of conditions raw and average \t having equal medians is %s for delay %i, with p value %i and statistic %i \n", nullh(h), r, p, stats.signedrank)
    
    tablerow(end+1:end+2) = [stats.signedrank, p];
    metadata(end+1:end+3) = [r, h, length(data(   data(:,condition)==average & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure))];
    
    [p,h, stats] = signrank(data(   data(:,condition)==raw & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure), ...
                    data(       data(:,condition)==low_pass & ...
                                data(:,delay)==r & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
        "alpha",0.05);
    tablerow(end+1:end+2) = [stats.signedrank, p];
    metadata(end+1:end+3) = [r, h, length(data(   data(:,condition)==average & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure))];
%     fprintf("null hypothesis of conditions raw and low pass \t having equal medians is %s for delay %i, with p value %i and statistic %i \n", nullh(h), r, p, stats.signedrank)

    [p,h, stats] = signrank(    data(   data(:,condition)==raw & ...
                                        data(:,delay)==r & ...
                                        data(:,participants)>=min(pps) & ...
                                        data(:,participants)<=max(pps), ...
                                measure), ...
                                data(   data(:,condition)==scale & ...
                                        data(:,delay)==r & ...
                                        data(:,participants)>=min(pps) & ...
                                        data(:,participants)<=max(pps), ...
                        measure), ...
        "alpha",0.05);
    tablerow(end+1:end+2) = [stats.signedrank, p];
    metadata(end+1:end+3) = [r, h, length(data(   data(:,condition)==scale & ...
                                    data(:,delay)==r & ...
                                    data(:,participants)>=min(pps) & ...
                                    data(:,participants)<=max(pps), ...
                            measure))];
    %     fprintf("null hypothesis of conditions raw and scale \t having equal medians is %s for delay %i, with p value %i and statistic %i \n", nullh(h), r, p, stats.signedrank)
disp(tablerow);
disp(metadata);
tablerow = [];
metadata = [];
end
%%
[p,h, stats] = signrank(data(   data(:,condition)==raw & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
                        data(   data(:,condition)==average & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
        "alpha",0.05);
    fprintf("null hypothesis of conditions raw and average for all delay conditions \t having equal medians is %s, with p value %i and statistic %i \n", nullh(h), p, stats.signedrank)

[p,h, stats] = signrank(data(   data(:,condition)==raw & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
                        data(   data(:,condition)==low_pass & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
        "alpha",0.05);
    fprintf("null hypothesis of conditions raw and low pass for all delay conditions \t having equal medians is %s, with p value %i and statistic %i \n", nullh(h), p, stats.signedrank)



[p,h, stats] = signrank(data(   data(:,condition)==raw & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
                        data(   data(:,condition)==scale & ...
                                data(:,participants)>=min(pps) & ...
                                data(:,participants)<=max(pps), ...
                            measure), ...
        "alpha",0.05);
fprintf("null hypothesis of conditions raw and scale for all delay conditions \t having equal medians is %s, with p value %i and statistic %i \n", nullh(h), p, stats.signedrank)

function y = measureprint(x)
    if (x==4); y="time"; else; y="number of contacts";end
end
    
function y = nullh(x) 
    if (x); y = "rejected"; else; y="not rejected"; end
end
